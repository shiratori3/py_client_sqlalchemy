excel_test_conf:
    task_vaild: False
    task_name: excel_test_conf  # optional, the name of task
    request_method: POST
    url_type: url  # the key to read, conf_dict['url'][url_type] of settings.yaml
    conf_name: excel\excel_test_sample.yaml  # the abs path is cwdPath.joinpath('\\conf\\post' + conf_name)
    max_limit: 100  # the maximum page num to get responses
    excel_fpath: D:\excel_test_conf_{date}.xlsx  # the abs path of output excel file, must include {date} to format
    col_list_to_capture:  # optional, a list of colname to filter the converted dataframe
      - colname1
      - colname2
    row_in_col_to_capture:
      colname1:
        - rowvalue1
        - rowvalue2
        - '%rowstring1%'
        - ''
    row_in_col_to_discard:
      colname1:
        - rowvalue1
        - rowvalue2
        - '%rowstring1%'
        - ''
    # optional, a dict to filter rows in cols from the dataframe.
    # diff cols will be combined by operator.or_
    # a filter of string cols like '%row_string%' is accepted.
    # For example,
    #     {'id': ['1111', '2222']} will include/exclude both of value '1111' and '2222' in col named 'id'
    #     {'id': ['%11%']} will include/exclude the string contains '11' in col named 'id'
    #     {'id': ['']} will include/exclude the empty string in col named 'id'
    sample_num: 1000
    # optional, int or float, return a sample dataframe with sample_num rows as the final result.
    # int meanings a max num, float meanings a percent
    timestamp_to_datetime:
      lastModifiedDate: ms
    # optional, a dict to convert timestamp data in cols in the converted dataframe
    # For example, {'lastModifiedDate': 'ms'} will convert the timestamps in col named 'lastModifiedDate' with pd.to_datetime(unit='ms')